msg <- paste("The length of a is ", length.a,
". And the length of y is ", length.y,
". They should be the same.", sep = '')
errors <- c(errors, msg) # If the length of "a" and "y" is not equal,
# the error message appears
}
length.name <- length(object@name) # checking the length of "name" of test-taker
if (length.name !=1){
msg <- paste("The length of name is ", length.name, ". This sould be 1", sep = '')
errors <- c(errors, msg) # If the length of "name" is not 1, the error message appears
}
# checking if the class "name" is character
if (class(object@name) !="character"){
msg <- paste("The class of name is ", class(object@name), ". This sould be character.", sep = '')
errors <- c(errors, msg) # If the length of "name" is not 1, the error message appears
}
value.y <- object@y # checking the value of "y" which should be either 0 (wrong) or 1 (right)
if (abs(max(value.y) - min(value.y)) > 1){
msg <- paste("y includes the value which is neither 0 or 1. It should be either 0 or 1", sep = '')
errors <- c(errors, msg) # If the value of "y" is neither 0 or 1, the error message appears
}
if (length(errors)==0) TRUE else errors
}
)
new("Rasch", name="Harry", a=c(-1,2,0,3,1), y=c(1,0,0,0,0))
new("Rasch", name="Harry", a=c(-1,2,0,3,1), y=c(1,0,0,0,-1))
new("Rasch", name='Harry', a=c(-2, 0, 3, 1, 1), y=c(1, 0, 1, 0, 0))
new("Rasch", name=2, a=c(-2, 0, 3, 1, 1), y=c(1, 0, 1, 0, 0))
new("Rasch", name='Harry', a=c(-2, 0, 3, 1, 1), y=c(1, 0, 2))
setGeneric(name = "showRasch",
function(object = "Rasch"){
standardGeneric("showRasch")
}
)
Harry <- new("Rasch", name='Harry', a=c(-2, 0, 3, 1, 1), y=c(1, 0, 1, 0, 0))
class(Harry)
setMethod("showRasch", "Rasch",
function(object){
raschObj <- rbind(object@a, object@y) # first row: difficulty parameter, a
# second row: whether object's answers are right
rownames(raschObj) <- c('a', object@name) # adding row names
return(raschObj) # matrix is created
}
)
showRasch(Harry)
setGeneric(name = "Probability",
def = function(raschObj, theta, ...){
standardGeneric("Probability")})
Harry@y
setMethod(f = "Probability",
definition = function(raschObj, theta, ...){
P <- exp(theta - raschObj@a)/(1+exp(theta - a))
Q <- 1-P
print(P)
PQ <- ifelse((raschObj@y==1), P, Q)
print(PQ)
}
)
Probability(Harry, 0.1)
Harry
setMethod(f = "Probability",
definition = function(raschObj, theta, ...){
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
print(P)
PQ <- ifelse((raschObj@y==1), P, Q)
print(PQ)
}
)
Probability(Harry, 0.1)
Prob.Harry <- Probability(Harry, 0.1)
Prob.Harry
Prob.Harry <- as.matrix(Probability(Harry, 0.1))
View(Prob.Harry)
Prob.Harry <- rbind(Probability(Harry, 0.1))
View(Prob.Harry)
Prob.table <- matrix()
Prob.table <- showRasch(raschObj)
Harry.tab <- show(Harry)
Harry.tab <- showRasch(Harry)
Harry.tab
Harry.tab[1,]
Harry.tab[2,]
Harry.tab[3,] <- c(0, 0, 0, 0, 0)
rbind(Harry.tab, c(0, 0, 0, 0, 0))
setMethod(f = "Probability",
definition = function(raschObj, theta, ...){
Prob.table <- showRasch(raschObj)
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q)
Prob.table <- rbind(Prob.table, P, PQ)
row.names(Prob.table) <- c("a", raschObj@name, "P", "P or Q")
print(Prob.table)
}
)
Probability(Harry, 0.1)
setMethod(f = "Probability",
definition = function(raschObj, theta, ...){
Prob.table <- showRasch(raschObj)
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q)
Prob.table <- rbind(Prob.table, P, PQ)
row.names(Prob.table) <- c("a", "y", "P", "P or Q")
print(Prob.table)
}
)
Probability(Harry, 0.1)
Probability(Harry, 1)
Probability(Ron, 0.5)
a <- as.numeric(c((sample(seq(-3, 3), size = 10, replace = TRUE))))
Harry <- new("Rasch", name = 'Harry', a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Ron <- new("Rasch", name = 'Ron', a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Hermione <- new("Rasch", name = 'Hermione", a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Hermione <- new("Rasch", name = "Hermione", a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Hermione <- new("Rasch", name = "Hermione", a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Probability(Harry, 1)
Harry <- new("Rasch", name = 'Harry', a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Ron <- new("Rasch", name = 'Ron', a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Hermione <- new("Rasch", name = "Hermione", a = a, y = as.numeric(c(sample(c(0,1), size=10, replace = TRUE))))
Probability(Harry, 1)
Probability(Ron, 0.5)
Probabiltiy(Hermione, 10)
Probability(Hermione, 10)
Probability(Hermione, 5)
Probability(Hermione, 3)
setGeneric(name = "Likelihood",
def = function(raschObj, theta, ...){
standardGeneric("Likelihood")})
setMethod(f = "Likelihood",
definition = function(raschObj, theta, ...){
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
sum(P*Q)
}
)
Likelihood(Harry, 1)
P
setMethod(f = "Likelihood",
definition = function(raschObj, theta, ...){
Likeli.table <- showRasch(raschObj)
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
Likeli.table <- rbind(Likeli.table, P, Q)
row.names(Likeli.table) <- c("a", "y", "P", "Q")
}
)
Likelihood(Harry, 1)
setMethod(f = "Likelihood",
definition = function(raschObj, theta, ...){
Likeli.table <- showRasch(raschObj)
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
Likeli.table <- rbind(Likeli.table, P, Q)
row.names(Likeli.table) <- c("a", "y", "P", "Q")
print(Likeli.table)
}
)
Likelihood(Harry, 1)
Likelihood(Ron, 0.5)
Likelihood(Hermione, 3)
L.test <- Likelihood(Hermione, 3)
L.test[,3:4]
L.test[3:4]
L.test[3:4,]
L.test[34,]
L.test[3,]
apply(L.test, 3, function(x) x*L.test[4,])
L.test[3,]%*%t(L.test[4,])
L.test[3,]
t(L.test[4,])
t(L.test[3,])
t(L.test[3,])%*%L.test[4,]
setMethod(f = "Likelihood",
definition = function(raschObj, theta, ...){
Likeli.table <- showRasch(raschObj)
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
Likeli.table <- rbind(Likeli.table, P, Q)
row.names(Likeli.table) <- c("a", "y", "P", "Q")
L <- t(Likeli.table[3,])%*%Likeli.table[4,]
print(L)
}
)
Likelihood(Harry, 1)
Likelihood(Ron, 0.5)
Likelihood(Hermione, 3)
setGeneric(name = "Prior",
def = function(theta, ...){
standardGeneric("Prior")})
setMethod(f = "Prior",
definition = function(theta, ...){
prior <- dnorm(theta, mean=1, sd=3)
print(prior)
}
)
Prior(theta = 1)
Prior(theta = 10)
Prior(theta = 5)
setGeneric(name = "EAP",
def = function(raschObj, lower, upper,...){
standardGeneric("EAP")})
Prior(theta = 1)
Prior(theta = 10)
Prior(theta = 5)
setMethod(f = "Prior",
definition = function(theta, ...){
prior <- dnorm(theta, mean=0, sd=3)
# Given a set of values dnorm() returns
# the height of the probability distribution at each point.
# mean=0 and sd=3 are given.
print(prior)
}
)
Prior(theta = 1)
Prior(theta = 10)
Prior(theta = 5)
Likelihood(Harry)
Likelihood(Harry, theta = 1)
setMethod(f = "EAP",
definition = function(raschObj, lower=-6, upper=6,...){ # default is given
prior <- Prior(theta)
likeli <- Likelihood(raschObj = raschObj, theta)
integrate(f=function(theta) prior*theta, lower=lower, upper=upper)
}
)
EAP(Harry, lower=-6, upper=6)
setMethod(f = "EAP",
definition = function(raschObj, lower=-6, upper=6,...){ # default is given
integrate(f=function(theta) Prior(theta)*Likelihood(theta), lower=lower, upper=upper)
}
)
EAP(Harry, lower=-6, upper=6)
Likelihood(Harry, theta=1)
Prior(theta = 1)
setMethod(f = "EAP",
definition = function(raschObj, lower=-6, upper=6,...){ # default is given
integrate(f=function(x) Prior(x)*Likelihood(x), lower=lower, upper=upper)
}
)
EAP(Harry, lower=-6, upper=6)
Likelihood(Harry, theta=2)
?integrate
integrate(function(x) dnorm(x, 0, 2), -6, 6)
Probability(Harry, x)
Probability(Harry, 1)
class(Probability(Harry, 1))
Likelihood(Harry, 1)
class(Likelihood(Harry, 1))
plot(Probability(Harry, theta = seq(-3, 3, by=0.5)))
plot(Probability(Harry, theta = seq(-3, 3, by=0.5)[3,]) ~ seq(-3, 3, by=0.5))
Probability(Harry, theta = seq(-3, 3, by=0.5)[3,])
Probability(Harry, theta = 1)[3,]
Probability(Harry, theta = 1)[,3]
Probability(Harry, theta = 1)
Probability(Harry, theta = 1)$P
Probability(Harry, theta = 1)@P
Probability(Harry, theta=1)[name(Probability(Harry, theta = 1))==P]
Probability(Harry, theta=1)[names(Probability(Harry, theta = 1))==P]
Probability(Harry, theta=1)
Probability(Harry, theta=1)[1,]
Probability(Harry, theta=1)[2,]
Probability(Harry, theta=1)[3,]
for(i in 0:3){
plot(Probability(Harry, theta = i))[3,] ~ seq(-3, 3, by=0.5))}
seq(-3, 3)
seq(-3, 3, by=0.5)
for(i in 0:3){
plot(seq(-3, 3, by=0.5), Probability(Harry, theta = i))[3,])}
for(i in 0:3){
plot(seq(-3, 3, by=0.5), Probability(Harry, theta = i)[3,])}
test.theta <- seq(-3, 3, by=0.5)
plot(test.theta, Probability(Harry, theta = test.theta)[3,])
test.theta <- seq(-10, 10)
test.a <- c(-3, 1, 2, 0, -1)
Hyun <- new("Rasch", name='Hyun', a=test.a, y=c(1, 1, 1, 0, 0))
Probability(Hyun)
Probability(Hyun, theta=1)
Likelihood(Hyun, theta=1)
Prior(theta=1)
setMethod(f = "Likelihood",
definition = function(raschObj, theta, ...){
Likeli.table <- showRasch(raschObj)
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q)
# Likeli.table <- rbind(Likeli.table, P, Q)
# row.names(Likeli.table) <- c("a", "y", "P", "Q")
# Likeli <- t(Likeli.table[3,])%*%Likeli.table[4,] # calculate sum((each value for P)*(each value for Q))
# print(Likeli) # output is a matrix
print(PQ)
}
)
Likelihood(Harry, theta=2)
Probability(Harry, theta=2)
class(Likelihood(Harry, theta=2))
setMethod(f = "Likelihood",
definition = function(raschObj, theta, ...){
Likeli.table <- showRasch(raschObj)
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q) # numeric vector of P (if correct answer), Q (if wrong answer)
# Likeli.table <- rbind(Likeli.table, P, Q)
# row.names(Likeli.table) <- c("a", "y", "P", "Q")
# Likeli <- t(Likeli.table[3,])%*%Likeli.table[4,] # calculate sum((each value for P)*(each value for Q))
# print(Likeli) # output is a matrix
sum(PQ)
}
)
Likelihood(Harry, theta=2)
sum(0.500000000 + 0.500000000 +0.017986210 +0.119202922 +0.006692851 +0.268941421+ 0.993307149 +0.993307149 +0.982013790 +0.268941421)
0.3*0.6*0.8
0.3+0.6_0.8
0.3+0.6+0.8
Likelihood(Harry, 1)
plot(Prior(theta=1))
setMethod(f = "Likelihood",
# Likelihood is the joint probability of all the observed responses given our guess of theta
definition = function(raschObj, theta, ...){
# the probability a test-taker get the right answer, P
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
# the probability a test-taker get the wrong answer, Q
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q) # if they got the correct answer, P
# if they got the wrong answer, Q
print(sum(PQ)) # Likelihood = sum of PQ
}
)
Likelihood(Hermione, theta = 3)
Likelihood(Harry, theta = 1)
Likelihood(Ron, theta = 0.5)
setMethod(f = "EAP",
definition = function(raschObj, lower=-6, upper=6,...){ # default -6, +6 is given
integrate(f=function(theta) { # we want to calculate the expected a posteriori value for theta
# the probability a test-taker get the right answer, P
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
# the probability a test-taker get the wrong answer, Q
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q) # if they got the correct answer, P
# if they got the wrong answer, Q
L <- sum(PQ) # Likelihood = sum of PQ
prior <- Prior(theta)
L*prior
}
lower=lower, upper=upper)
}
)
setMethod(f = "EAP",
definition = function(raschObj, lower=-6, upper=6,...){ # default -6, +6 is given
integrate(f=function(theta) { # we want to calculate the expected a posteriori value for theta
# the probability a test-taker get the right answer, P
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
# the probability a test-taker get the wrong answer, Q
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q) # if they got the correct answer, P
# if they got the wrong answer, Q
L <- sum(PQ) # Likelihood = sum of PQ
prior <- Prior(theta)
L*prior
},
lower=lower, upper=upper)
})
EAP(Hyun)
Likelihood(Hermione, theta = 3)
class(Likelihood(Hermione, theta = 3))
Prior(theta = 5)
class(Prior(theta = 5))
setMethod(f = "EAP",
definition = function(raschObj, lower=-6, upper=6,...){ # default -6, +6 is given
integrate(f=function(x) Likelihood(raschObj, theta = x)*Prior(theta = x), # we want to calculate the expected a posteriori value for theta,
lower=lower, upper=upper)
}
)
EAP(Hyun)
setMethod(f = "EAP",
definition = function(raschObj, lower=-6, upper=6,...){ # default -6, +6 is given
# we want to calculate the expected a posteriori value for theta,
f <- function(x) Likelihood(raschObj, theta = x)*Prior(theta = x)
eap <- integrate(f=f, lower=lower, upper=upper)
print(eap)
}
)
EAP(Hyun)
setMethod(f = "EAP",
definition = function(raschObj, lower, upper,...){
# we want to calculate the expected a posteriori value for theta,
f <- function(x) Likelihood(raschObj, theta = x)*Prior(theta = x)
eap <- integrate(f=f, lower=-6, upper=6) # default -6, +6 is given
print(eap)
}
)
EAP(Hyun)
setMethod(f = "Likelihood",
# Likelihood is the joint probability of all the observed responses given our guess of theta
definition = function(raschObj, theta, ...){
# the probability a test-taker get the right answer, P
P <- exp(theta - raschObj@a)/(1+exp(theta - raschObj@a))
# the probability a test-taker get the wrong answer, Q
Q <- 1-P
PQ <- ifelse((raschObj@y==1), P, Q) # if they got the correct answer, P
# if they got the wrong answer, Q
print(sum(PQ)) # Likelihood = sum of PQ
}
)
Likelihood(Hermione, theta = 3)
length(Likelihood(Hermione, theta = 3)
)
length(Prior(theta = 3))
EAP(Hyun)
Likelihood(Hyun, theta=1)
length(EAP(Hyun))
EAP(Harry, lower=-6, upper=6)
EAP(Ron)
EAP(Hermione)
EAP(Ron, lower=-3, upper=3)
setMethod(f = "Plot",
definition = function(raschObj, theta, ...){
output <- Probability(raschObj)
print(output)
}
)
setGeneric(name = "Plot",
def = function(raschObj, theta, ...){
standardGeneric("Plot")})
setMethod(f = "Plot",
definition = function(raschObj, theta, ...){
output <- Probability(raschObj)
print(output)
}
)
Plot(Harry)
setMethod(f = "Plot",
definition = function(raschObj, theta...){
output <- Probability(raschObj, theta)
print(output)
}
)
Plot(Harry, theta = 1)
setMethod(f = "Plot",
definition = function(raschObj, theta...){
output <- Probability(raschObj = raschObj, theta = theta)
print(output)
}
)
Plot(Harry, theta = 1)
setMethod(f = "Plot",
definition = function(raschObj, theta,...){
output <- Probability(raschObj = raschObj, theta = theta)
print(output)
}
)
Plot(Harry, theta = 1)
setMethod(f = "Plot",
definition = function(raschObj, theta,...){
output <- Probability(raschObj = raschObj, theta = theta)
}
)
Plot(Harry, theta = 1)
Plot(Harry, theta = 1)[,1]
Plot(Harry, theta = 1)[2,1]
ncol(Plot(Harry, theta = 1))
setMethod(f = "Plot",
definition = function(raschObj, theta,...){
output <- Probability(raschObj = raschObj, theta = theta)
for(i in 1:ncol(output)) plot(output[2,i])
}
)
Plot(Harry, theta = 1)
setMethod(f = "Plot",
definition = function(raschObj, theta,...){
output <- Probability(raschObj = raschObj, theta = theta)
for(i in 1:ncol(output)) plot(output[2,i], xlim = c(theta-1, theta+1))
}
)
Plot(Harry, theta = 1)
paste("Probability of answering the question correctly: ", Harry@name, sep = "")
setMethod(f = "Plot",
definition = function(raschObj, theta,...){
output <- Probability(raschObj = raschObj, theta = theta)
for(i in 1:ncol(output)) plot(output[2,i], xlim = c(theta-1, theta+1),
ylab = "Probability of answering the question correctly",
xlab = "possible theta",
main = paste("Probability of answering the question correctly: ", raschObj@name, sep = ""))
}
)
Plot(Harry, theta = 1)
library(devtools)
library(roxygen2)
setwd("/Users/hyunjoooh/Desktop/2017_Stat_Prog/Midterm_2017")
a <- c(-3, 0, 1, 2, 2)
Harry <- new("Rasch", name = 'Harry', a = a,
y = c(1, 1, 0, 0, 0))
Probability(Harry)
Probability(Harry, theta = 1)
Probability(Harry, theta = 1)[3,]
library(devtools)
library(roxygen2)
setwd("/Users/hyunjoooh/Desktop/2017_Stat_Prog/Midterm_2017") # change to match the directory
current.code <- as.package("easyRasch")
load_all(current.code)
load_all(current.code)
load_all(current.code)
current.code <- as.package("easyRasch")
load_all(current.code)
load_all(current.code)
current.code <- as.package("easyRasch")
load_all(current.code)
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
test(current.code)
